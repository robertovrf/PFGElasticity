const char debugMSG[]	  = "[@Distributor]"

/* commands */
const char HELP[]       = "help"
const char ALTERNATE[]  = "alternate"
const char PROPAGATE[]  = "propagate"
const char SHARDING[]   = "sharding"
const char SHARDING2[]  = "sharding2"
const char LOCAL[]      = "local"
const char EXIT[]       = "exit"

/* HTTP responses */
const char OK_STATUS[] 			= "200 OK"
const char BADREQUEST_STATUS[] 	= "400 Bad Request"
const char NOTFOUND_STATUS[] 	= "404 Not Found"

/* emergent sys port */
const int PORT = 2002

component provides App requires io.Output out, data.StringUtil strUtil, data.IntUtil iu, io.Input in, 
	monitoring.Perception, data.json.JSONEncoder encoder, data.DecUtil du, time.Timer t, 
	http.util.HTTPUtil httpUtil, data.json.JSONParser parser, net.TCPSocket, net.TCPServerSocket {

	String remoteConfigs[] 		= null
	String localConfigs[] 		= null
	String distributedProxies[] = null
	Perception perception 		= null

	HTTPMessage readRequest(TCPSocket client) {
		HTTPMessage msg = clone httpUtil.readHTTPRequest(client)
		/* removes the htdocs path + /meta/ */
		int start = HTTPUtil.htdocs.arrayLength + 6 // 6 = {/meta/}.arrayLength
		if (msg.resource.arrayLength > start) {
			int length = msg.resource.arrayLength - start
			msg.resource = strUtil.subString(msg.resource, start, length)	
		}
		return msg
	}

	char[] parseCommand(HTTPMessage msg) {
		char result[] = ""
		if (msg.command == "GET") {
			result = msg.resource
		} else if (msg.command == "POST") {
			// to do...
		}
		return result
	}

	void sendResponse(TCPSocket client, char msg[]) {
		client.send(msg)
		client.disconnect()
	}

	char[] formatHTTPResponse(String response[]) {
		char resp[] = null
		if (response.arrayLength > 0) {	resp = new char[]("HTTP/1.0 ", response[0].string, " \r\n")	}
		else { resp = new char[]("HTTP/1.0 ", BADREQUEST_STATUS, " \r\n") }
		resp = new char[] (resp, "Server: EmergentSys v1\r\n", "Content-Encoding: binary\r\n")	
		if (response.arrayLength > 1) {
			resp = new char[](resp, "Content-Length: $(iu.intToString(response[1].string.arrayLength))\r\n")	
		} else { resp = new char[](resp, "Content-Length: $(iu.intToString(0))\r\n") }
		resp = new char[](resp, "Content-Type: text/json\r\n", "Access-Control-Allow-Origin: *\r\n","\r\n")
		if (response.arrayLength > 1) { resp = new char[](resp, response[1].string) }
		return resp
	}

	String[] execCommand(char command[]) {
		if ((command == null) || (command == "")) {	return new String[](new String(BADREQUEST_STATUS)) }
		return commandInterpret(command)
	}

	void executor(TCPSocket client) {
		sendResponse(client, formatHTTPResponse(execCommand(parseCommand(readRequest(client)))))
	}

	void serverStart() {
		TCPServerSocket host = new TCPServerSocket()
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, PORT)) {
			out.println("Error: failed to bind master socket")
			return
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) { asynch::executor(client)	}
		}
	}

	void help() {
		out.println("Command list:")
		out.println(" $(HELP) - to list all commands")
		out.println(" $(ALTERNATE) - to distribute list alternating requests between replicas")
		out.println(" $(PROPAGATE) - to distribute list propagating write requests to all replicas")
		out.println(" $(SHARDING) - to distribute list with sharding")
		out.println(" $(SHARDING2) - to distribute list with sharding2")
		out.println(" $(LOCAL) - to bring list locally")
		out.println(" $(EXIT) - to finish execution")
	}

	void local() {
		perception.setConfig(localConfigs[0].string)
		out.println("$(debugMSG) Local composition running.")
	}

	void distribute(char proxyInterface[]) {
		char remoteConfig[] = getRemoteConfig("data/adt/$(proxyInterface)")
		if (remoteConfig != null) {	
			perception.setConfig(remoteConfig)
			out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")	
		} else {
			throw new Exception("Something went wrong! Couldn't find remote proxy.")
		}
	}

	String[] commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		if (cmdList.arrayLength == 1) {
			if (cmd == HELP) {
				help()
			} else if (cmd == PROPAGATE) {
				distribute("ListCPPropagate.o")
			} else if (cmd == ALTERNATE) {
				distribute("ListCPAlternate.o")
			} else if (cmd == SHARDING) {
				distribute("ListCPSharding.o")
			} else if (cmd == SHARDING2) {
				distribute("ListCPSharding2.o")
			} else if (cmd == LOCAL) {
				local()
			} else {
				out.println("Invalid command.")
				return new String[](new String(BADREQUEST_STATUS))
			}
		}
		return new String[](new String(OK_STATUS))
	}

	char[] getRemoteConfig(char proxy[]) {
		for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
			if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
				return remoteConfigs[pointer].string
			}
		}
		return null
	}

	// Guess there's a better way of doing this...
	void remoteLocalSeparation() {
		if ((remoteConfigs == null) || (localConfigs == null)) {
			out.println("$(debugMSG) Separating local and remote compositions...")
			String configs[] = perception.getAllConfigs()
			for (int confPointer = 0; confPointer < configs.arrayLength; confPointer++) {
				bool remote = false
				for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
					if (strUtil.find(configs[confPointer].string, distributedProxies[distProxy].string) 
						!= StringUtil.NOT_FOUND) {
						remoteConfigs = new String[](remoteConfigs, configs[confPointer])
						remote = true
						break
					}
				}
				if (!remote) {
					localConfigs = new String[](localConfigs, configs[confPointer])
				}
			}
		}
	}

	// TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
	// currently hard-coded 
	void loadDistributedProxies() {
		if (distributedProxies == null) {
			distributedProxies = new String[](
				new String("ListCPPropagate.o"),
				new String("ListCPAlternate.o"),
				new String("ListCPSharding.o"),
				new String("ListCPSharding2.o"))
		}
	}

	int App:main(AppParam params[]) {
		perception = new Perception(true)
		/* Loading target system and adding a monitoring proxy to it */
		perception.setMain("../server/main.o", null)
		//perception.addProxy("|../distributor/monitoring/proxies/ServerProxy.o|*(*:server.Server[0]:*)|")
		String configs[] = perception.getAllConfigs()
		for (int i = 0; i < configs.arrayLength; i++) {
			out.println("$(debugMSG) $(iu.intToString(i+1)): $(configs[i].string)")
		}
		loadDistributedProxies()
		remoteLocalSeparation()
		local()
		asynch::serverStart()
		/* command prompt */
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") { commandInterpret(cmd)	}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}

