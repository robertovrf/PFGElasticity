data Param {
	char value[]
}

data Request {
	char functionName[]
	int numParams
	Param params[]
}

data Response {
	// 1 OK - 2 FAILED
	byte status
	// if it's null or "" this has to be translated to null
	char value[]
}

data IPAddr {
	char ip[]
	int port
}

data Int {
	int i
}

/* Available list operations */
const char ADD[]          = "add"
const char GET_LENGTH[]   = "getLength"
const char GET_CONTENTS[] = "getContents"
const char CLEAR_LIST[]   = "clearList"

/* IPs */
//const char LOCALHOST[] = "localhost"
const char IP1[] = "localhost"

component provides List:heap(Destructor, AdaptEvents) requires data.json.JSONEncoder parser,
	net.TCPSocket, net.TCPServerSocket, data.StringUtil strUtil, io.Output out, data.IntUtil iu {

	IPAddr remoteDistsIps[] = null
	IPAddr remoteListsIps[] = null
	Mutex remoteListsIpsLock = new Mutex()
	int pointer = 0

	void setupRemoteDistsIPs() {
		if (remoteDistsIps == null) {
			remoteDistsIps = new IPAddr[1]
			remoteDistsIps[0] = new IPAddr()
			remoteDistsIps[0].ip = new char[](IP1)
			remoteDistsIps[0].port = 2011
		}
	}

	void setupRemoteListsIPs() {
		if (remoteListsIps == null) {
			remoteListsIps = new IPAddr[1]
			remoteListsIps[0] = new IPAddr()
			remoteListsIps[0].ip = new char[](IP1)
			remoteListsIps[0].port = 2010 // 2010
		}
	}

	void sendMsgToRemoteDists(char msg[]) {
		out.println("here 5")
		setupRemoteDistsIPs()
		for (int i = 0; i < remoteDistsIps.arrayLength; i++) {
			connectAndSend(remoteDistsIps[i], msg, true)
		}
	}

	Response parseResponse(char content[]) {
		String helper[] = strUtil.explode(content, "!")
		Response response
		if (helper.arrayLength > 1) {
			response = parser.jsonToData(helper[0].string, typeof(Response), null)
			Response response2 = new Response()
			response2.value = helper[1].string
			response2.status = response.status
			response = response2
		} else {
			response = parser.jsonToData(content, typeof(Response), null)
		}
		return response
	}

	Response readResponse(TCPSocket s) {
		Response response = null
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = s.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\r") &&
					(command[len-2] == "\r") && (command[len-1] == "\r")) {
					response = parseResponse(strUtil.subString(command,
						0, command.arrayLength-4))
					break
				}
			}
		}
		if (response == null) { s.disconnect() }
		return response
	}

	bool establishConnection(IPAddr addr, TCPSocket remoteObj) {
		if (!remoteObj.connect(addr.ip, addr.port)) {
			out.println("Connection error!")
			return false
		}
		return true
	}

	Response connectAndSend(IPAddr addr, char content[], bool readResponse) {
		TCPSocket remoteObj = new TCPSocket()
		Response resp = null
		if (establishConnection(addr, remoteObj)) {
			remoteObj.send(content)
			if (readResponse) { resp = readResponse(remoteObj) }
			remoteObj.disconnect()
		}
		return resp
	}

  void makeGroupRequest(char content[]) {
		setupRemoteListsIPs()
	    IPAddr addr = null
	    for (int i = 0; i < remoteListsIps.arrayLength; i++) {
	      addr = remoteListsIps[i]
	      asynch::connectAndSend(addr, content, true)
	    }
	}

	Response makeRequest(char content[]) {
		setupRemoteListsIPs()
		Response resp = null
		IPAddr addr = null
		mutex(remoteListsIpsLock) {
			if (remoteListsIps.arrayLength >= 1) {
				if (pointer == remoteListsIps.arrayLength) { pointer = 0 }
				addr = remoteListsIps[pointer]
				pointer++
			} else { out.println("ERROR!") }
		}
		return connectAndSend(addr, content, true)
	}

	void List:add(Data item) {
		out.println("Estamos aqui!")
		Request request = new Request()
		request.functionName = ADD
		request.numParams = 1
		char requestStr[] = parser.jsonFromData(request, null)
		char param[] = parser.jsonFromData(item, null)
		char content2[] = new char[](requestStr, "!", param, "\r\r\r\r")
		makeGroupRequest(content2)
	}

	void List:remove(Data item) {
		// TODO
	}

	void List:update(Data item, Data newVersion) {
		// TODO
	}

	Data List:getFirst() {
		// TODO
		return null
	}

	Data List:getNext() {
		// TODO
		return null
	}

	bool List:isEnd() {
		// TODO
		return false
	}

	Data List:getIndex(int ndx) {
		// TODO
		return null
	}

	void List:setIndex(int ndx, Data d) {
		//TODO
	}

	int List:getLength() {
		Request request = new Request()
		request.functionName = GET_LENGTH
		request.numParams = 0
		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		Response response = makeRequest(content2)
		return iu.intFromString(response.value)
	}

	Data[] List:getContents(opt Type t) {
		Request request = new Request()
		request.functionName = GET_CONTENTS
		request.numParams = 0
		char requestStr[] = parser.jsonFromData(request, null)
		char content2[] = new char[](requestStr, "!", " ", "\r\r\r\r")
		Response response = makeRequest(content2)
		Int nums[] = parser.jsonToArray(response.value, typeof(Int[]), null)
		return nums
	}

	void buildFromArray(Data items[]) {
		// TODO
	}

	bool List:clone(Object o) {
		// TODO
		return false
	}

	void clearList() {
		// TODO
	}

	void Destructor:destroy() {
	}

	void AdaptEvents:inactive() {
		if (content != null) {
			content = getContents()
			char msg[] = new char[]("clearList!\r\r\r\r")
			sendMsgToRemoteDists(msg)
		}
	}

	// this is extremely hardcoded! ):
	void AdaptEvents:active() {
		out.println("here 4")
		if (content != null) {
			char state[] = parser.jsonFromArray(content, null)
			char msg[] = new char[]("../distributor/RemoteList.o!", state, "\r\r\r\r")
			sendMsgToRemoteDists(msg)
		}
	}
}
